generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change to your preferred database
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  email         String         @unique
  name          String
  password      String
  status        String         @default("offline") // "online", "offline", "away"
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  chatrooms     Chatroom[]     @relation("UserChatrooms")
  messages      Message[]
  notifications Notification[]
  files         File[]

  /// Indexes for search optimization
  @@index([username], map: "idx_username")
  @@index([email], map: "idx_email")
}

model Chatroom {
  id         String    @id @default(uuid())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  members    User[]    @relation("UserChatrooms")
  messages   Message[]
  files      File[]
}

model Message {
  id         String   @id @default(uuid())
  content    String
  senderId   String
  sender     User     @relation(fields: [senderId], references: [id])
  chatroomId String
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  type      String // e.g., "message", "system"
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model File {
  id           String   @id @default(uuid())
  filename     String
  url          String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
  chatroomId   String
  chatroom     Chatroom @relation(fields: [chatroomId], references: [id])
  createdAt    DateTime @default(now())
}
